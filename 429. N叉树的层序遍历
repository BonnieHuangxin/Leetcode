from collections import deque
"""
# Definition for a Node.
class Node:
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
#append与extend的区别：append(object) 是将一个对象作为一个整体添加到列表中，extend(iterable) 是将一个可迭代对象中的每个元素逐个地添加到列表中
#deque([]) deque模块是python标准库collections中的一项 双端队列 入队：deque.append() 出队：deque.popleft() 从列表左边弹出 
class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        res = []
        if not root:
            return res
        dq = deque([root]) #deuqe双端队列的用法
        level = 0
        while dq:
            res.append([])
            for _ in range(len(dq)):
                cur = dq.popleft()
                res[level].append(cur.val)
                dq.extend(cur.children)
                
            level += 1
        return res
        
#更好的方法        
 """
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        if not root:
            return
        res = []
        cur_level = [root] #存放当前层的node
        while cur_level:
            temp = [] #存放当前层的val
            next_level = [] #存放下一层的node
            for i in cur_level:
                temp.append(i.val)
                if i.children:
                    for j in i.children:
                        next_level.append(j)
            res.append(temp)
            cur_level = next_level
        return res
