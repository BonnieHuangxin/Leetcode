# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

解题思路（递归法）
现在需要把A->B->C->D进行反转，
1. 可以先假设B->C->D已经反转好，已经成为了D->C->B，那么接下来要做的事情就是将D->C->B看成一个整体，让这个整体的next指向A，所以问题转化了反转B->C->D。那么，
2. 可以先假设C->D已经反转好，已经成为了D->C,那么接下来要做的事情就是将D->C看成一个整体，让这个整体的next指向B，所以问题转化了反转C->D。那么，
依次类推......


class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        #head为None或只有一个head
        if head == None or head.next == None:
            return head
        
        #假设head.next已反转好，仅需移动head的位置
        new_head = self.reverseList(head.next)
        #head之前的next现在排在队尾，将head插入至head.next之后
        head.next.next = head
        #末尾为NULL
        head.next = None
        return new_head

#解法2
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        #使用栈来实现，先进后出
        #注意这里stack中初始元素为None，否则会报错空
        stack = [None]
        p = head
        while p:
            stack.append(p)
            p = p.next
                     
        head = stack.pop()
        p = head
        #这里也以none来判断结束
        while p:
            p.next = stack.pop()
            p = p.next
        return head
