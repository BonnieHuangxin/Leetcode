# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        利用二叉搜索树的特性，可以通过比较所找节点与根节点的大小确认其所在的子树，若两节点都在左子树或右子     树，则递归搜索，若一边一个，则返回根节点。
        """
        #对二叉搜索树利用递归算法
        #都在左子树，则在左子树查找
        if p.val < root.val and q.val < root.val:
            return self.lowestCommonAncestor(root.left, p, q)
        ##都在右子树，则在右子树查找
        elif p.val > root.val and q.val > root.val:
            return self.lowestCommonAncestor(root.right, p, q)
        elif p.val <= root.val <= q.val or q.val <= root.val <= p.val:
            return root
